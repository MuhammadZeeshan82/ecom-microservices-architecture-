name: Deploy to AWS ECS

on:
  push:
    branches:
      - main   # or your branch name

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push auth-service
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_AUTH }} ./auth-service
        docker tag ${{ secrets.ECR_REPOSITORY_AUTH }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_AUTH }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_AUTH }}:latest

    - name: Build, Tag, and Push cart-service
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_CART }} ./cart-service
        docker tag ${{ secrets.ECR_REPOSITORY_CART }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_CART }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_CART }}:latest

    - name: Build, Tag, and Push product-service
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_PRODUCT }} ./product-service
        docker tag ${{ secrets.ECR_REPOSITORY_PRODUCT }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_PRODUCT }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_PRODUCT }}:latest

    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster ${{ secrets.CLUSTER_NAME }} --service auth-service --force-new-deployment
        aws ecs update-service --cluster ${{ secrets.CLUSTER_NAME }} --service cart-service --force-new-deployment
        aws ecs update-service --cluster ${{ secrets.CLUSTER_NAME }} --service product-service --force-new-deployment
